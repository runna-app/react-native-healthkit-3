{"version":3,"names":["_bunTest","require","beforeAll","mockModule","queryWorkoutSamplesWithAnchor","jest","fn","isHealthDataAvailable","isProtectedDataAvailable","authorizationStatusFor","requestAuthorization","saveQuantitySample","deleteQuantitySample","deleteSamples","disableAllBackgroundDelivery","disableBackgroundDelivery","enableBackgroundDelivery","queryCategorySamplesWithAnchor","queryQuantitySamplesWithAnchor","getBiologicalSex","getBloodType","getDateOfBirth","getFitzpatrickSkinType","getPreferredUnits","getRequestStatusForAuthorization","getWheelchairUse","getWorkoutRoutes","queryCategorySamples","queryCorrelationSamples","queryHeartbeatSeriesSamples","queryHeartbeatSeriesSamplesWithAnchor","queryQuantitySamples","querySources","queryStatisticsForQuantity","queryWorkoutSamples","saveCategorySample","saveCorrelationSample","saveWorkoutSample","subscribeToObserverQuery","unsubscribeQuery","saveWorkoutRoute","getWorkoutPlanById","startWatchAppWithWorkoutConfiguration","workoutSessionMirroringStartHandler","endRemoteWorkoutSession","mock","module","NativeModules","ReactNativeHealthkit","NativeEventEmitter"],"sources":["test-setup.ts"],"sourcesContent":["// eslint-disable-next-line import/no-unresolved\nimport { mock, jest, beforeAll } from 'bun:test'\n\nimport type Native from './native-types'\n\nbeforeAll(async () => {\n  const mockModule: typeof Native = {\n    queryWorkoutSamplesWithAnchor: jest.fn(),\n    isHealthDataAvailable: jest.fn(),\n    isProtectedDataAvailable: jest.fn(),\n    authorizationStatusFor: jest.fn(),\n    requestAuthorization: jest.fn(),\n    saveQuantitySample: jest.fn(),\n    deleteQuantitySample: jest.fn(),\n    deleteSamples: jest.fn(),\n    disableAllBackgroundDelivery: jest.fn(),\n    disableBackgroundDelivery: jest.fn(),\n    enableBackgroundDelivery: jest.fn(),\n    queryCategorySamplesWithAnchor: jest.fn(),\n    queryQuantitySamplesWithAnchor: jest.fn(),\n    getBiologicalSex: jest.fn(),\n    getBloodType: jest.fn(),\n    getDateOfBirth: jest.fn(),\n    getFitzpatrickSkinType: jest.fn(),\n    getPreferredUnits: jest.fn(),\n    getRequestStatusForAuthorization: jest.fn(),\n    getWheelchairUse: jest.fn(),\n    getWorkoutRoutes: jest.fn(),\n    queryCategorySamples: jest.fn(),\n    queryCorrelationSamples: jest.fn(),\n    queryHeartbeatSeriesSamples: jest.fn(),\n    queryHeartbeatSeriesSamplesWithAnchor: jest.fn(),\n    queryQuantitySamples: jest.fn(),\n    querySources: jest.fn(),\n    queryStatisticsForQuantity: jest.fn(),\n    queryWorkoutSamples: jest.fn(),\n    saveCategorySample: jest.fn(),\n    saveCorrelationSample: jest.fn(),\n    saveWorkoutSample: jest.fn(),\n    subscribeToObserverQuery: jest.fn(),\n    unsubscribeQuery: jest.fn(),\n    saveWorkoutRoute: jest.fn(),\n    getWorkoutPlanById: jest.fn(),\n    startWatchAppWithWorkoutConfiguration: jest.fn(),\n    workoutSessionMirroringStartHandler: jest.fn(),\n    endRemoteWorkoutSession: jest.fn(),\n  }\n\n  await mock.module('react-native', () => ({\n    NativeModules: {\n      ReactNativeHealthkit: mockModule,\n    },\n    NativeEventEmitter: jest.fn(),\n  }))\n})\n"],"mappings":"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","ignoreList":[]}