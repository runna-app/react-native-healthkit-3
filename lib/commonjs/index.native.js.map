{"version":3,"names":["_reactNative","require","_nativeTypes","_types","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","notAvailableError","Platform","OS","hasWarned","UnavailableFn","retVal","console","warn","authorizationStatusFor","Promise","resolve","HKAuthorizationStatus","notDetermined","availableQuantityTypes","disableAllBackgroundDelivery","disableBackgroundDelivery","enableBackgroundDelivery","getBiologicalSex","HKBiologicalSex","notSet","getBloodType","HKBloodType","getDateOfBirth","Date","getFitzpatrickSkinType","HKFitzpatrickSkinType","getMostRecentCategorySample","getMostRecentQuantitySample","getMostRecentWorkout","getPreferredUnit","HKUnits","Count","getPreferredUnits","getRequestStatusForAuthorization","HKAuthorizationRequestStatus","unknown","getWheelchairUse","HKWheelchairUse","getWorkoutRoutes","isHealthDataAvailable","useSources","useStatisticsForQuantity","queryCategorySamples","queryCategorySamplesWithAnchor","samples","deletedSamples","newAnchor","queryCorrelationSamples","queryHeartbeatSeriesSamples","queryHeartbeatSeriesSamplesWithAnchor","queryQuantitySamples","queryQuantitySamplesWithAnchor","queryStatisticsForQuantity","averageQuantity","undefined","maximumQuantity","minimumQuantity","sumQuantity","mostRecentQuantity","mostRecentQuantityDateInterval","duration","queryStatisticsCollectionForQuantity","queryWorkouts","queryWorkoutSamples","queryWorkoutSamplesWithAnchor","querySources","requestAuthorization","deleteQuantitySample","deleteSamples","getWorkoutPlanById","saveCategorySample","saveCorrelationSample","saveQuantitySample","saveWorkoutSample","saveWorkoutRoute","subscribeToChanges","startWatchApp","workoutSessionMirroringStartHandler","pauseMirroringWorkoutSession","resumeMirroringWorkoutSession","useMostRecentCategorySample","useMostRecentQuantitySample","useMostRecentWorkout","useSubscribeToChanges","useHealthkitAuthorization","useIsHealthDataAvailable","isProtectedDataAvailable","queryStateOfMindSamples","Healthkit","_default","default"],"sources":["index.native.tsx"],"sourcesContent":["import { Platform } from 'react-native'\n\nimport {\n  HKAuthorizationRequestStatus, HKAuthorizationStatus, HKBiologicalSex, HKBloodType, HKFitzpatrickSkinType, HKUnits, HKWheelchairUse,\n} from './native-types'\n\nimport type ReactNativeHealthkit from './index.ios'\nimport type { QueryCategorySamplesFn } from './utils/queryCategorySamples'\nimport type { QueryQuantitySamplesFn } from './utils/queryQuantitySamples'\n\nconst notAvailableError = `[@kingstinct/react-native-healthkit] Platform \"${\n  Platform.OS\n}\" not supported`\n\nlet hasWarned = false\n\nfunction UnavailableFn<T = unknown>(retVal: T) {\n  return () => {\n    if (!hasWarned) {\n      // eslint-disable-next-line no-console\n      console.warn(notAvailableError)\n      hasWarned = true\n    }\n    return retVal\n  }\n}\n\nconst authorizationStatusFor = UnavailableFn(Promise.resolve(HKAuthorizationStatus.notDetermined)),\n      availableQuantityTypes = UnavailableFn([]),\n      disableAllBackgroundDelivery = UnavailableFn(Promise.resolve(false)),\n      disableBackgroundDelivery = UnavailableFn(Promise.resolve(false)),\n      enableBackgroundDelivery = UnavailableFn(Promise.resolve(false)),\n      getBiologicalSex = UnavailableFn(Promise.resolve(HKBiologicalSex.notSet)),\n      getBloodType = UnavailableFn(Promise.resolve(HKBloodType.notSet)),\n      getDateOfBirth = UnavailableFn(Promise.resolve(new Date(0))),\n      getFitzpatrickSkinType = UnavailableFn(Promise.resolve(HKFitzpatrickSkinType.notSet)),\n      getMostRecentCategorySample = UnavailableFn(Promise.resolve(null)),\n      getMostRecentQuantitySample = UnavailableFn(Promise.resolve(null)),\n      getMostRecentWorkout = UnavailableFn(Promise.resolve(null)),\n      getPreferredUnit = UnavailableFn(Promise.resolve(HKUnits.Count)),\n      getPreferredUnits = UnavailableFn(Promise.resolve([])),\n      getRequestStatusForAuthorization = UnavailableFn(Promise.resolve(HKAuthorizationRequestStatus.unknown)),\n      getWheelchairUse = UnavailableFn(Promise.resolve(HKWheelchairUse.notSet)),\n      getWorkoutRoutes = UnavailableFn(Promise.resolve([])),\n      isHealthDataAvailable = async () => Promise.resolve(false),\n      useSources = UnavailableFn(null),\n      useStatisticsForQuantity = UnavailableFn(null),\n      queryCategorySamples = UnavailableFn(Promise.resolve([])) as unknown as QueryCategorySamplesFn,\n      queryCategorySamplesWithAnchor = UnavailableFn(Promise.resolve({\n        samples: [],\n        deletedSamples: [],\n        newAnchor: '',\n      })),\n      queryCorrelationSamples = UnavailableFn(Promise.resolve([])),\n      queryHeartbeatSeriesSamples = UnavailableFn(Promise.resolve([])),\n      queryHeartbeatSeriesSamplesWithAnchor = UnavailableFn(Promise.resolve({\n        samples: [],\n        deletedSamples: [],\n        newAnchor: '',\n      })),\n      queryQuantitySamples = UnavailableFn(Promise.resolve([])) as unknown as QueryQuantitySamplesFn,\n      queryQuantitySamplesWithAnchor = UnavailableFn(Promise.resolve({\n        samples: [],\n        deletedSamples: [],\n        newAnchor: '',\n      })),\n      queryStatisticsForQuantity = UnavailableFn(Promise.resolve({\n        averageQuantity: undefined,\n        maximumQuantity: undefined,\n        minimumQuantity: undefined,\n        sumQuantity: undefined,\n        mostRecentQuantity: undefined,\n        mostRecentQuantityDateInterval: undefined,\n        duration: undefined,\n      })),\n      queryStatisticsCollectionForQuantity = UnavailableFn(Promise.resolve([\n        {\n          averageQuantity: undefined,\n          maximumQuantity: undefined,\n          minimumQuantity: undefined,\n          sumQuantity: undefined,\n          mostRecentQuantity: undefined,\n          mostRecentQuantityDateInterval: undefined,\n          duration: undefined,\n        },\n      ])),\n      queryWorkouts = UnavailableFn(Promise.resolve([])),\n      queryWorkoutSamples = UnavailableFn(Promise.resolve([])),\n      queryWorkoutSamplesWithAnchor = UnavailableFn(Promise.resolve({\n        samples: [],\n        deletedSamples: [],\n        newAnchor: '',\n      })),\n      querySources = UnavailableFn(Promise.resolve([])),\n      requestAuthorization = UnavailableFn(Promise.resolve(false)),\n      deleteQuantitySample = UnavailableFn(Promise.resolve(false)),\n      deleteSamples = UnavailableFn(Promise.resolve(false)),\n      getWorkoutPlanById = UnavailableFn(Promise.resolve(null)),\n      saveCategorySample = UnavailableFn(Promise.resolve(false)),\n      saveCorrelationSample = UnavailableFn(Promise.resolve(false)),\n      saveQuantitySample = UnavailableFn(Promise.resolve(false)),\n      saveWorkoutSample = UnavailableFn(Promise.resolve(null)),\n      saveWorkoutRoute = UnavailableFn(Promise.resolve(false)),\n      subscribeToChanges = UnavailableFn(Promise.resolve(async () => Promise.resolve(false))),\n      startWatchApp = UnavailableFn(async () => Promise.resolve(false)),\n      workoutSessionMirroringStartHandler = UnavailableFn(Promise.resolve(false)),\n      pauseMirroringWorkoutSession = UnavailableFn(Promise.resolve(false)),\n      resumeMirroringWorkoutSession = UnavailableFn(Promise.resolve(false)),\n      useMostRecentCategorySample = UnavailableFn(null),\n      useMostRecentQuantitySample = UnavailableFn(null),\n      useMostRecentWorkout = UnavailableFn(null),\n      useSubscribeToChanges = UnavailableFn([null, () => null]),\n      useHealthkitAuthorization = UnavailableFn([null, async () => Promise.resolve(HKAuthorizationRequestStatus.unknown)] as const),\n      useIsHealthDataAvailable = () => false,\n      isProtectedDataAvailable = async () => Promise.resolve(false),\n      queryStateOfMindSamples = UnavailableFn(Promise.resolve([]))\n\nconst Healthkit: typeof ReactNativeHealthkit = {\n  authorizationStatusFor,\n  availableQuantityTypes,\n  deleteQuantitySample,\n  deleteSamples,\n  disableAllBackgroundDelivery,\n  disableBackgroundDelivery,\n  enableBackgroundDelivery,\n  getBiologicalSex,\n  getBloodType,\n  getDateOfBirth,\n  getFitzpatrickSkinType,\n  getMostRecentCategorySample,\n  getMostRecentQuantitySample,\n  getMostRecentWorkout,\n  getPreferredUnit,\n  getPreferredUnits,\n  getRequestStatusForAuthorization,\n  getWheelchairUse,\n  getWorkoutPlanById,\n  getWorkoutRoutes,\n  isHealthDataAvailable,\n  isProtectedDataAvailable,\n  queryCategorySamples,\n  queryCategorySamplesWithAnchor,\n  queryCorrelationSamples,\n  queryHeartbeatSeriesSamples,\n  queryHeartbeatSeriesSamplesWithAnchor,\n  queryQuantitySamples,\n  queryQuantitySamplesWithAnchor,\n  querySources,\n  queryStatisticsForQuantity,\n  queryStatisticsCollectionForQuantity,\n  queryWorkouts,\n  queryWorkoutSamples,\n  queryWorkoutSamplesWithAnchor,\n  requestAuthorization,\n  saveCategorySample,\n  saveCorrelationSample,\n  saveQuantitySample,\n  saveWorkoutRoute,\n  saveWorkoutSample,\n  subscribeToChanges,\n  startWatchApp,\n  workoutSessionMirroringStartHandler,\n  pauseMirroringWorkoutSession,\n  resumeMirroringWorkoutSession,\n  useHealthkitAuthorization,\n  useIsHealthDataAvailable,\n  useMostRecentCategorySample,\n  useMostRecentQuantitySample,\n  useMostRecentWorkout,\n  useSources,\n  useStatisticsForQuantity,\n  useSubscribeToChanges,\n  queryStateOfMindSamples,\n}\n\nexport {\n  authorizationStatusFor,\n  availableQuantityTypes,\n  deleteQuantitySample,\n  deleteSamples,\n  disableAllBackgroundDelivery,\n  disableBackgroundDelivery,\n  enableBackgroundDelivery,\n  getBiologicalSex,\n  getBloodType,\n  getDateOfBirth,\n  getFitzpatrickSkinType,\n  getMostRecentCategorySample,\n  getMostRecentQuantitySample,\n  getMostRecentWorkout,\n  getPreferredUnit,\n  getPreferredUnits,\n  getRequestStatusForAuthorization,\n  getWheelchairUse,\n  getWorkoutPlanById,\n  getWorkoutRoutes,\n  isHealthDataAvailable,\n  isProtectedDataAvailable,\n  queryCategorySamples,\n  queryCategorySamplesWithAnchor,\n  queryCorrelationSamples,\n  queryHeartbeatSeriesSamples,\n  queryHeartbeatSeriesSamplesWithAnchor,\n  queryQuantitySamples,\n  queryQuantitySamplesWithAnchor,\n  querySources,\n  queryStatisticsForQuantity,\n  queryStatisticsCollectionForQuantity,\n  queryWorkouts,\n  queryWorkoutSamples,\n  queryWorkoutSamplesWithAnchor,\n  requestAuthorization,\n  saveCategorySample,\n  saveCorrelationSample,\n  saveQuantitySample,\n  saveWorkoutRoute,\n  saveWorkoutSample,\n  subscribeToChanges,\n  startWatchApp,\n  workoutSessionMirroringStartHandler,\n  pauseMirroringWorkoutSession,\n  resumeMirroringWorkoutSession,\n  useHealthkitAuthorization,\n  useIsHealthDataAvailable,\n  useMostRecentCategorySample,\n  useMostRecentQuantitySample,\n  useMostRecentWorkout,\n  useSources,\n  useStatisticsForQuantity,\n  useSubscribeToChanges,\n  queryStateOfMindSamples,\n}\n\nexport * from './types'\n\nexport default Healthkit\n"],"mappings":"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","ignoreList":[]}