{"version":3,"names":["renderHook","act","waitForNextUpdate","describe","NativeTypes","useHealthkitAuthorization","beforeAll","default","test","HKAuthorizationRequestStatus","HKCategoryTypeIdentifier","Native","jest","spyOn","mockReturnValue","Promise","resolve","shouldRequest","result","abdominalCramps","expect","current","toBe","spy","unnecessary","retVal","r"],"sources":["useHealthkitAuthorization.test.ts"],"sourcesContent":["import { renderHook, act } from '@testing-library/react-native'\n\nimport waitForNextUpdate from '../test-utils'\n\ndescribe('useHealthkitAuthorization', () => {\n  let NativeTypes: typeof import('../native-types')\n  let useHealthkitAuthorization: typeof import('./useHealthkitAuthorization').default\n  beforeAll(async () => {\n    NativeTypes = await import('../native-types')\n    useHealthkitAuthorization = (await import('./useHealthkitAuthorization')).default\n  })\n\n  test('should return shouldRequest', async () => {\n    const { HKAuthorizationRequestStatus, HKCategoryTypeIdentifier, default: Native } = NativeTypes\n\n    jest.spyOn(Native, 'getRequestStatusForAuthorization').mockReturnValue(Promise.resolve(HKAuthorizationRequestStatus.shouldRequest))\n\n    const { result } = renderHook(() => useHealthkitAuthorization([HKCategoryTypeIdentifier.abdominalCramps]))\n\n    await waitForNextUpdate()\n\n    expect(result.current[0]).toBe(HKAuthorizationRequestStatus.shouldRequest)\n  })\n\n  test('should request permissions', async () => {\n    const { HKAuthorizationRequestStatus, HKCategoryTypeIdentifier, default: Native } = NativeTypes\n\n    const spy = jest.spyOn(Native, 'getRequestStatusForAuthorization').mockReturnValue(Promise.resolve(HKAuthorizationRequestStatus.shouldRequest))\n    jest.spyOn(Native, 'requestAuthorization').mockReturnValue(Promise.resolve(true))\n\n    const { result } = renderHook(() => useHealthkitAuthorization([HKCategoryTypeIdentifier.abdominalCramps]))\n\n    await waitForNextUpdate()\n\n    spy.mockReturnValue(Promise.resolve(HKAuthorizationRequestStatus.unnecessary))\n\n    let retVal: typeof HKAuthorizationRequestStatus | undefined\n    await act(async () => {\n      const r = await result.current[1]() as unknown as typeof HKAuthorizationRequestStatus\n      retVal = r\n    })\n\n    expect(result.current[0]).toBe(HKAuthorizationRequestStatus.unnecessary)\n    expect(retVal).toBe(HKAuthorizationRequestStatus.unnecessary)\n  })\n\n  test('should return unnecessary', async () => {\n    const { HKAuthorizationRequestStatus, HKCategoryTypeIdentifier, default: Native } = NativeTypes\n\n    jest.spyOn(Native, 'getRequestStatusForAuthorization').mockReturnValue(Promise.resolve(HKAuthorizationRequestStatus.unnecessary))\n\n    const { result } = renderHook(() => useHealthkitAuthorization([HKCategoryTypeIdentifier.abdominalCramps]))\n\n    await waitForNextUpdate()\n\n    expect(result.current[0]).toBe(HKAuthorizationRequestStatus.unnecessary)\n  })\n\n  test('should return null before initalizing', async () => {\n    const { HKCategoryTypeIdentifier } = NativeTypes\n\n    const { result } = renderHook(() => useHealthkitAuthorization([HKCategoryTypeIdentifier.abdominalCramps]))\n\n    expect(result.current[0]).toBe(null)\n\n    await waitForNextUpdate()\n  })\n})\n"],"mappings":"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","ignoreList":[]}