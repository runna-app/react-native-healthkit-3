{"version":3,"names":["Platform","HKAuthorizationRequestStatus","HKAuthorizationStatus","HKBiologicalSex","HKBloodType","HKFitzpatrickSkinType","HKUnits","HKWheelchairUse","notAvailableError","OS","hasWarned","UnavailableFn","retVal","console","warn","authorizationStatusFor","Promise","resolve","notDetermined","availableQuantityTypes","disableAllBackgroundDelivery","disableBackgroundDelivery","enableBackgroundDelivery","getBiologicalSex","notSet","getBloodType","getDateOfBirth","Date","getFitzpatrickSkinType","getMostRecentCategorySample","getMostRecentQuantitySample","getMostRecentWorkout","getPreferredUnit","Count","getPreferredUnits","getRequestStatusForAuthorization","unknown","getWheelchairUse","getWorkoutRoutes","isHealthDataAvailable","useSources","useStatisticsForQuantity","queryCategorySamples","queryCategorySamplesWithAnchor","samples","deletedSamples","newAnchor","queryCorrelationSamples","queryHeartbeatSeriesSamples","queryHeartbeatSeriesSamplesWithAnchor","queryQuantitySamples","queryQuantitySamplesWithAnchor","queryStatisticsForQuantity","averageQuantity","undefined","maximumQuantity","minimumQuantity","sumQuantity","mostRecentQuantity","mostRecentQuantityDateInterval","duration","queryWorkouts","queryWorkoutSamples","queryWorkoutSamplesWithAnchor","querySources","requestAuthorization","deleteQuantitySample","deleteSamples","getWorkoutPlanById","saveCategorySample","saveCorrelationSample","saveQuantitySample","saveWorkoutSample","saveWorkoutRoute","subscribeToChanges","useMostRecentCategorySample","useMostRecentQuantitySample","useMostRecentWorkout","useSubscribeToChanges","useHealthkitAuthorization","useIsHealthDataAvailable","isProtectedDataAvailable","Healthkit"],"sources":["index.native.tsx"],"sourcesContent":["import { Platform } from 'react-native'\n\nimport {\n  HKAuthorizationRequestStatus, HKAuthorizationStatus, HKBiologicalSex, HKBloodType, HKFitzpatrickSkinType, HKUnits, HKWheelchairUse,\n} from './native-types'\n\nimport type ReactNativeHealthkit from './index.ios'\nimport type { QueryCategorySamplesFn } from './utils/queryCategorySamples'\nimport type { QueryQuantitySamplesFn } from './utils/queryQuantitySamples'\n\nconst notAvailableError = `[@kingstinct/react-native-healthkit] Platform \"${\n  Platform.OS\n}\" not supported`\n\nlet hasWarned = false\n\nfunction UnavailableFn<T = unknown>(retVal: T) {\n  return () => {\n    if (!hasWarned) {\n      // eslint-disable-next-line no-console\n      console.warn(notAvailableError)\n      hasWarned = true\n    }\n    return retVal\n  }\n}\n\nconst authorizationStatusFor = UnavailableFn(Promise.resolve(HKAuthorizationStatus.notDetermined)),\n      availableQuantityTypes = UnavailableFn([]),\n      disableAllBackgroundDelivery = UnavailableFn(Promise.resolve(false)),\n      disableBackgroundDelivery = UnavailableFn(Promise.resolve(false)),\n      enableBackgroundDelivery = UnavailableFn(Promise.resolve(false)),\n      getBiologicalSex = UnavailableFn(Promise.resolve(HKBiologicalSex.notSet)),\n      getBloodType = UnavailableFn(Promise.resolve(HKBloodType.notSet)),\n      getDateOfBirth = UnavailableFn(Promise.resolve(new Date(0))),\n      getFitzpatrickSkinType = UnavailableFn(Promise.resolve(HKFitzpatrickSkinType.notSet)),\n      getMostRecentCategorySample = UnavailableFn(Promise.resolve(null)),\n      getMostRecentQuantitySample = UnavailableFn(Promise.resolve(null)),\n      getMostRecentWorkout = UnavailableFn(Promise.resolve(null)),\n      getPreferredUnit = UnavailableFn(Promise.resolve(HKUnits.Count)),\n      getPreferredUnits = UnavailableFn(Promise.resolve([])),\n      getRequestStatusForAuthorization = UnavailableFn(Promise.resolve(HKAuthorizationRequestStatus.unknown)),\n      getWheelchairUse = UnavailableFn(Promise.resolve(HKWheelchairUse.notSet)),\n      getWorkoutRoutes = UnavailableFn(Promise.resolve([])),\n      isHealthDataAvailable = async () => Promise.resolve(false),\n      useSources = UnavailableFn(null),\n      useStatisticsForQuantity = UnavailableFn(null),\n      queryCategorySamples = UnavailableFn(Promise.resolve([])) as unknown as QueryCategorySamplesFn,\n      queryCategorySamplesWithAnchor = UnavailableFn(Promise.resolve({\n        samples: [],\n        deletedSamples: [],\n        newAnchor: '',\n      })),\n      queryCorrelationSamples = UnavailableFn(Promise.resolve([])),\n      queryHeartbeatSeriesSamples = UnavailableFn(Promise.resolve([])),\n      queryHeartbeatSeriesSamplesWithAnchor = UnavailableFn(Promise.resolve({\n        samples: [],\n        deletedSamples: [],\n        newAnchor: '',\n      })),\n      queryQuantitySamples = UnavailableFn(Promise.resolve([])) as unknown as QueryQuantitySamplesFn,\n      queryQuantitySamplesWithAnchor = UnavailableFn(Promise.resolve({\n        samples: [],\n        deletedSamples: [],\n        newAnchor: '',\n      })),\n      queryStatisticsForQuantity = UnavailableFn(Promise.resolve({\n        averageQuantity: undefined,\n        maximumQuantity: undefined,\n        minimumQuantity: undefined,\n        sumQuantity: undefined,\n        mostRecentQuantity: undefined,\n        mostRecentQuantityDateInterval: undefined,\n        duration: undefined,\n      })),\n      queryWorkouts = UnavailableFn(Promise.resolve([])),\n      queryWorkoutSamples = UnavailableFn(Promise.resolve([])),\n      queryWorkoutSamplesWithAnchor = UnavailableFn(Promise.resolve({\n        samples: [],\n        deletedSamples: [],\n        newAnchor: '',\n      })),\n      querySources = UnavailableFn(Promise.resolve([])),\n      requestAuthorization = UnavailableFn(Promise.resolve(false)),\n      deleteQuantitySample = UnavailableFn(Promise.resolve(false)),\n      deleteSamples = UnavailableFn(Promise.resolve(false)),\n      getWorkoutPlanById = UnavailableFn(Promise.resolve(null)),\n      saveCategorySample = UnavailableFn(Promise.resolve(false)),\n      saveCorrelationSample = UnavailableFn(Promise.resolve(false)),\n      saveQuantitySample = UnavailableFn(Promise.resolve(false)),\n      saveWorkoutSample = UnavailableFn(Promise.resolve(null)),\n      saveWorkoutRoute = UnavailableFn(Promise.resolve(false)),\n      subscribeToChanges = UnavailableFn(Promise.resolve(async () => Promise.resolve(false))),\n      useMostRecentCategorySample = UnavailableFn(null),\n      useMostRecentQuantitySample = UnavailableFn(null),\n      useMostRecentWorkout = UnavailableFn(null),\n      useSubscribeToChanges = UnavailableFn([null, () => null]),\n      useHealthkitAuthorization = UnavailableFn([null, async () => Promise.resolve(HKAuthorizationRequestStatus.unknown)] as const),\n      useIsHealthDataAvailable = () => false,\n      isProtectedDataAvailable = async () => Promise.resolve(false)\n\nconst Healthkit: typeof ReactNativeHealthkit = {\n  authorizationStatusFor,\n  availableQuantityTypes,\n  deleteQuantitySample,\n  deleteSamples,\n  disableAllBackgroundDelivery,\n  disableBackgroundDelivery,\n  enableBackgroundDelivery,\n  getBiologicalSex,\n  getBloodType,\n  getDateOfBirth,\n  getFitzpatrickSkinType,\n  getMostRecentCategorySample,\n  getMostRecentQuantitySample,\n  getMostRecentWorkout,\n  getPreferredUnit,\n  getPreferredUnits,\n  getRequestStatusForAuthorization,\n  getWheelchairUse,\n  getWorkoutPlanById,\n  getWorkoutRoutes,\n  isHealthDataAvailable,\n  isProtectedDataAvailable,\n  queryCategorySamples,\n  queryCategorySamplesWithAnchor,\n  queryCorrelationSamples,\n  queryHeartbeatSeriesSamples,\n  queryHeartbeatSeriesSamplesWithAnchor,\n  queryQuantitySamples,\n  queryQuantitySamplesWithAnchor,\n  querySources,\n  queryStatisticsForQuantity,\n  queryWorkouts,\n  queryWorkoutSamples,\n  queryWorkoutSamplesWithAnchor,\n  requestAuthorization,\n  saveCategorySample,\n  saveCorrelationSample,\n  saveQuantitySample,\n  saveWorkoutRoute,\n  saveWorkoutSample,\n  subscribeToChanges,\n  useHealthkitAuthorization,\n  useIsHealthDataAvailable,\n  useMostRecentCategorySample,\n  useMostRecentQuantitySample,\n  useMostRecentWorkout,\n  useSources,\n  useStatisticsForQuantity,\n  useSubscribeToChanges,\n}\n\nexport {\n  authorizationStatusFor,\n  availableQuantityTypes,\n  deleteQuantitySample,\n  deleteSamples,\n  disableAllBackgroundDelivery,\n  disableBackgroundDelivery,\n  enableBackgroundDelivery,\n  getBiologicalSex,\n  getBloodType,\n  getDateOfBirth,\n  getFitzpatrickSkinType,\n  getMostRecentCategorySample,\n  getMostRecentQuantitySample,\n  getMostRecentWorkout,\n  getPreferredUnit,\n  getPreferredUnits,\n  getRequestStatusForAuthorization,\n  getWheelchairUse,\n  getWorkoutPlanById,\n  getWorkoutRoutes,\n  isHealthDataAvailable,\n  isProtectedDataAvailable,\n  queryCategorySamples,\n  queryCategorySamplesWithAnchor,\n  queryCorrelationSamples,\n  queryHeartbeatSeriesSamples,\n  queryHeartbeatSeriesSamplesWithAnchor,\n  queryQuantitySamples,\n  queryQuantitySamplesWithAnchor,\n  querySources,\n  queryStatisticsForQuantity,\n  queryWorkouts,\n  queryWorkoutSamples,\n  queryWorkoutSamplesWithAnchor,\n  requestAuthorization,\n  saveCategorySample,\n  saveCorrelationSample,\n  saveQuantitySample,\n  saveWorkoutRoute,\n  saveWorkoutSample,\n  subscribeToChanges,\n  useHealthkitAuthorization,\n  useIsHealthDataAvailable,\n  useMostRecentCategorySample,\n  useMostRecentQuantitySample,\n  useMostRecentWorkout,\n  useSources,\n  useStatisticsForQuantity,\n  useSubscribeToChanges,\n}\n\nexport * from './types'\n\nexport default Healthkit\n"],"mappings":"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","ignoreList":[]}